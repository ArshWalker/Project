{"version":3,"sources":["app/views/material-kit/auto-complete/AutocompleteCombo.jsx","app/views/material-kit/auto-complete/AsyncAutocomplete.jsx","app/views/material-kit/auto-complete/BadgeAutocomplete.jsx","app/views/material-kit/auto-complete/AppAutoComplete.jsx"],"names":["AutoComplete","styled","Autocomplete","width","marginBottom","suggestions","label","filter","createFilterOptions","AutocompleteCombo","React","useState","value","setValue","options","getOptionLabel","option","renderInput","params","TextField","variant","fullWidth","onChange","event","newValue","inputValue","filterOptions","filtered","push","renderOption","style","freeSolo","getOptionDisabled","sleep","delay","Promise","resolve","setTimeout","AsyncAutocomplete","open","setOpen","setOptions","loading","length","useEffect","active","a","fetch","response","json","countries","Object","keys","map","key","item","id","onOpen","onClose","name","InputProps","endAdornment","Fragment","CircularProgress","color","size","BadgeAutocomplete","theme","useTheme","Box","sx","marginTop","spacing","multiple","top100Films","title","defaultValue","placeholder","filterSelectedOptions","renderTags","getTagProps","index","Chip","year","Container","margin","breakpoints","down","AppAutoComplete","className","routeSegments","path","py"],"mappings":"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","file":"static/js/23.502d0874.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\nimport { TextField, Autocomplete } from '@mui/material'\r\nimport { createFilterOptions } from '@mui/material/Autocomplete'\r\nimport { styled } from '@mui/system'\r\n\r\nconst AutoComplete = styled(Autocomplete)(() => ({\r\n    width: 300,\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst suggestions = [\r\n    { label: 'Afghanistan' },\r\n    { label: 'Aland Islands' },\r\n    { label: 'Albania' },\r\n    { label: 'Algeria' },\r\n    { label: 'American Samoa' },\r\n    { label: 'Andorra' },\r\n    { label: 'Angola' },\r\n    { label: 'Anguilla' },\r\n    { label: 'Antarctica' },\r\n    { label: 'Antigua and Barbuda' },\r\n    { label: 'Argentina' },\r\n    { label: 'Armenia' },\r\n    { label: 'Aruba' },\r\n    { label: 'Australia' },\r\n    { label: 'Austria' },\r\n    { label: 'Azerbaijan' },\r\n    { label: 'Bahamas' },\r\n    { label: 'Bahrain' },\r\n    { label: 'Bangladesh' },\r\n    { label: 'Barbados' },\r\n    { label: 'Belarus' },\r\n    { label: 'Belgium' },\r\n    { label: 'Belize' },\r\n    { label: 'Benin' },\r\n    { label: 'Bermuda' },\r\n    { label: 'Bhutan' },\r\n    { label: 'Bolivia, Plurinational State of' },\r\n    { label: 'Bonaire, Sint Eustatius and Saba' },\r\n    { label: 'Bosnia and Herzegovina' },\r\n    { label: 'Botswana' },\r\n    { label: 'Bouvet Island' },\r\n    { label: 'Brazil' },\r\n    { label: 'British Indian Ocean Territory' },\r\n    { label: 'Brunei Darussalam' },\r\n]\r\n\r\nconst filter = createFilterOptions()\r\n\r\nconst AutocompleteCombo = () => {\r\n    const [value, setValue] = React.useState(null)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (newValue && newValue.inputValue) {\r\n            setValue({\r\n                label: newValue.inputValue,\r\n            })\r\n            return\r\n        }\r\n        setValue(newValue)\r\n    }\r\n\r\n    const filterOptions = (options, params) => {\r\n        const filtered = filter(options, params)\r\n        if (params.inputValue !== '') {\r\n            filtered.push({\r\n                inputValue: params.inputValue,\r\n                label: `Add \"${params.inputValue}\"`,\r\n            })\r\n        }\r\n        return filtered\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <AutoComplete\r\n                options={suggestions}\r\n                getOptionLabel={(option) => option.label}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label=\"Combo box\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <AutoComplete\r\n                value={value}\r\n                onChange={handleChange}\r\n                filterOptions={filterOptions}\r\n                options={suggestions}\r\n                getOptionLabel={(option) => {\r\n                    // e.g value selected with enter, right from the input\r\n                    if (typeof option === 'string') {\r\n                        return option\r\n                    }\r\n                    if (option.inputValue) {\r\n                        return option.inputValue\r\n                    }\r\n                    return option.label\r\n                }}\r\n                renderOption={(option) => option.label}\r\n                style={{ width: 300 }}\r\n                freeSolo\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label=\"Free solo with text demo\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n\r\n            <AutoComplete\r\n                options={suggestions}\r\n                getOptionLabel={(option) => option.label}\r\n                getOptionDisabled={(option) =>\r\n                    option === suggestions[0] || option === suggestions[2]\r\n                }\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        label=\"Disabled option\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AutocompleteCombo\r\n","import React from 'react'\r\nimport fetch from 'cross-fetch'\r\nimport { TextField, CircularProgress, Autocomplete } from '@mui/material'\r\nimport { styled } from '@mui/system'\r\n\r\nconst AutoComplete = styled(Autocomplete)(() => ({\r\n    width: 300,\r\n}))\r\n\r\nfunction sleep(delay = 0) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\nexport default function AsyncAutocomplete() {\r\n    const [open, setOpen] = React.useState(false)\r\n    const [options, setOptions] = React.useState([])\r\n    const loading = open && options.length === 0\r\n\r\n    React.useEffect(() => {\r\n        let active = true\r\n\r\n        if (!loading) {\r\n            return undefined\r\n        }\r\n\r\n        ; (async () => {\r\n            const response = await fetch(\r\n                'https://country.register.gov.uk/records.json?page-size=5000'\r\n            )\r\n            await sleep(1e3) // For demo purposes.\r\n            const countries = await response.json()\r\n\r\n            if (active) {\r\n                setOptions(\r\n                    Object.keys(countries).map((key) => countries[key].item[0])\r\n                )\r\n            }\r\n        })()\r\n\r\n        return () => {\r\n            active = false\r\n        }\r\n    }, [loading])\r\n\r\n    React.useEffect(() => {\r\n        if (!open) {\r\n            setOptions([])\r\n        }\r\n    }, [open])\r\n\r\n    return (\r\n        <AutoComplete\r\n            id=\"asynchronous-demo\"\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true)\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false)\r\n            }}\r\n            getOptionLabel={(option) => option.name}\r\n            options={options}\r\n            loading={loading}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label=\"Asynchronous\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? (\r\n                                    <CircularProgress\r\n                                        color=\"inherit\"\r\n                                        size={20}\r\n                                    />\r\n                                ) : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Box, useTheme } from '@mui/system'\r\nimport { Chip, TextField, Autocomplete } from '@mui/material'\r\n\r\nconst BadgeAutocomplete = () => {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                width: 500,\r\n                '& > * + *': {\r\n                    marginTop: theme.spacing(3),\r\n                },\r\n            }}\r\n        >\r\n            <Autocomplete\r\n                multiple\r\n                id=\"tags-standard\"\r\n                options={top100Films}\r\n                getOptionLabel={(option) => option.title}\r\n                defaultValue={[top100Films[13]]}\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"standard\"\r\n                        label=\"Multiple values\"\r\n                        placeholder=\"Favorites\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n            <Autocomplete\r\n                multiple\r\n                id=\"tags-outlined\"\r\n                options={top100Films}\r\n                getOptionLabel={(option) => option.title}\r\n                defaultValue={[top100Films[13]]}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"outlined\"\r\n                        label=\"filterSelectedOptions\"\r\n                        placeholder=\"Favorites\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n            <Autocomplete\r\n                multiple\r\n                id=\"tags-filled\"\r\n                options={top100Films.map((option) => option.title)}\r\n                defaultValue={[top100Films[13].title]}\r\n                freeSolo\r\n                renderTags={(value, getTagProps) =>\r\n                    value.map((option, index) => (\r\n                        <Chip\r\n                            variant=\"outlined\"\r\n                            label={option}\r\n                            {...getTagProps({ index })}\r\n                        />\r\n                    ))\r\n                }\r\n                renderInput={(params) => (\r\n                    <TextField\r\n                        {...params}\r\n                        variant=\"filled\"\r\n                        label=\"freeSolo\"\r\n                        placeholder=\"Favorites\"\r\n                        fullWidth\r\n                    />\r\n                )}\r\n            />\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default BadgeAutocomplete\r\n\r\n// Top 100 films as rated by IMDb users. http://www.imdb.com/chart/top\r\nconst top100Films = [\r\n    { title: 'The Shawshank Redemption', year: 1994 },\r\n    { title: 'The Godfather', year: 1972 },\r\n    { title: 'The Godfather: Part II', year: 1974 },\r\n    { title: 'The Dark Knight', year: 2008 },\r\n    { title: '12 Angry Men', year: 1957 },\r\n    { title: \"Schindler's List\", year: 1993 },\r\n    { title: 'Pulp Fiction', year: 1994 },\r\n    { title: 'The Lord of the Rings: The Return of the King', year: 2003 },\r\n    { title: 'The Good, the Bad and the Ugly', year: 1966 },\r\n    { title: 'Fight Club', year: 1999 },\r\n    { title: 'The Lord of the Rings: The Fellowship of the Ring', year: 2001 },\r\n    { title: 'Star Wars: Episode V - The Empire Strikes Back', year: 1980 },\r\n    { title: 'Forrest Gump', year: 1994 },\r\n    { title: 'Inception', year: 2010 },\r\n    { title: 'The Lord of the Rings: The Two Towers', year: 2002 },\r\n    { title: \"One Flew Over the Cuckoo's Nest\", year: 1975 },\r\n    { title: 'Goodfellas', year: 1990 },\r\n    { title: 'The Matrix', year: 1999 },\r\n    { title: 'Seven Samurai', year: 1954 },\r\n    { title: 'Star Wars: Episode IV - A New Hope', year: 1977 },\r\n    { title: 'City of God', year: 2002 },\r\n    { title: 'Se7en', year: 1995 },\r\n    { title: 'The Silence of the Lambs', year: 1991 },\r\n    { title: \"It's a Wonderful Life\", year: 1946 },\r\n    { title: 'Life Is Beautiful', year: 1997 },\r\n    { title: 'The Usual Suspects', year: 1995 },\r\n    { title: 'Léon: The Professional', year: 1994 },\r\n    { title: 'Spirited Away', year: 2001 },\r\n    { title: 'Saving Private Ryan', year: 1998 },\r\n    { title: 'Once Upon a Time in the West', year: 1968 },\r\n    { title: 'American History X', year: 1998 },\r\n    { title: 'Interstellar', year: 2014 },\r\n    { title: 'Casablanca', year: 1942 },\r\n    { title: 'City Lights', year: 1931 },\r\n    { title: 'Psycho', year: 1960 },\r\n    { title: 'The Green Mile', year: 1999 },\r\n    { title: 'The Intouchables', year: 2011 },\r\n    { title: 'Modern Times', year: 1936 },\r\n    { title: 'Raiders of the Lost Ark', year: 1981 },\r\n    { title: 'Rear Window', year: 1954 },\r\n    { title: 'The Pianist', year: 2002 },\r\n    { title: 'The Departed', year: 2006 },\r\n    { title: 'Terminator 2: Judgment Day', year: 1991 },\r\n    { title: 'Back to the Future', year: 1985 },\r\n    { title: 'Whiplash', year: 2014 },\r\n    { title: 'Gladiator', year: 2000 },\r\n    { title: 'Memento', year: 2000 },\r\n    { title: 'The Prestige', year: 2006 },\r\n    { title: 'The Lion King', year: 1994 },\r\n    { title: 'Apocalypse Now', year: 1979 },\r\n    { title: 'Alien', year: 1979 },\r\n    { title: 'Sunset Boulevard', year: 1950 },\r\n    {\r\n        title:\r\n            'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb',\r\n        year: 1964,\r\n    },\r\n    { title: 'The Great Dictator', year: 1940 },\r\n    { title: 'Cinema Paradiso', year: 1988 },\r\n    { title: 'The Lives of Others', year: 2006 },\r\n    { title: 'Grave of the Fireflies', year: 1988 },\r\n    { title: 'Paths of Glory', year: 1957 },\r\n    { title: 'Django Unchained', year: 2012 },\r\n    { title: 'The Shining', year: 1980 },\r\n    { title: 'WALL·E', year: 2008 },\r\n    { title: 'American Beauty', year: 1999 },\r\n    { title: 'The Dark Knight Rises', year: 2012 },\r\n    { title: 'Princess Mononoke', year: 1997 },\r\n    { title: 'Aliens', year: 1986 },\r\n    { title: 'Oldboy', year: 2003 },\r\n    { title: 'Once Upon a Time in America', year: 1984 },\r\n    { title: 'Witness for the Prosecution', year: 1957 },\r\n    { title: 'Das Boot', year: 1981 },\r\n    { title: 'Citizen Kane', year: 1941 },\r\n    { title: 'North by Northwest', year: 1959 },\r\n    { title: 'Vertigo', year: 1958 },\r\n    { title: 'Star Wars: Episode VI - Return of the Jedi', year: 1983 },\r\n    { title: 'Reservoir Dogs', year: 1992 },\r\n    { title: 'Braveheart', year: 1995 },\r\n    { title: 'M', year: 1931 },\r\n    { title: 'Requiem for a Dream', year: 2000 },\r\n    { title: 'Amélie', year: 2001 },\r\n    { title: 'A Clockwork Orange', year: 1971 },\r\n    { title: 'Like Stars on Earth', year: 2007 },\r\n    { title: 'Taxi Driver', year: 1976 },\r\n    { title: 'Lawrence of Arabia', year: 1962 },\r\n    { title: 'Double Indemnity', year: 1944 },\r\n    { title: 'Eternal Sunshine of the Spotless Mind', year: 2004 },\r\n    { title: 'Amadeus', year: 1984 },\r\n    { title: 'To Kill a Mockingbird', year: 1962 },\r\n    { title: 'Toy Story 3', year: 2010 },\r\n    { title: 'Logan', year: 2017 },\r\n    { title: 'Full Metal Jacket', year: 1987 },\r\n    { title: 'Dangal', year: 2016 },\r\n    { title: 'The Sting', year: 1973 },\r\n    { title: '2001: A Space Odyssey', year: 1968 },\r\n    { title: \"Singin' in the Rain\", year: 1952 },\r\n    { title: 'Toy Story', year: 1995 },\r\n    { title: 'Bicycle Thieves', year: 1948 },\r\n    { title: 'The Kid', year: 1921 },\r\n    { title: 'Inglourious Basterds', year: 2009 },\r\n    { title: 'Snatch', year: 2000 },\r\n    { title: '3 Idiots', year: 2009 },\r\n    { title: 'Monty Python and the Holy Grail', year: 1975 },\r\n]\r\n","import React from 'react'\r\nimport { Breadcrumb, SimpleCard } from 'app/components'\r\nimport AutocompleteCombo from './AutocompleteCombo'\r\nimport AsyncAutocomplete from './AsyncAutocomplete'\r\nimport BadgeAutocomplete from './BadgeAutocomplete'\r\nimport { Box, styled } from '@mui/system'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst AppAutoComplete = () => {\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Material', path: '/material' },\r\n                        { name: 'Autocomplete' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"autocomplete combo\">\r\n                <AutocompleteCombo />\r\n            </SimpleCard>\r\n            <Box py=\"12px\" />\r\n            <SimpleCard title=\"Asyncronous Autocomplete\">\r\n                <AsyncAutocomplete></AsyncAutocomplete>\r\n            </SimpleCard>\r\n            <Box py=\"12px\" />\r\n            <SimpleCard title=\"Asyncronous Autocomplete\">\r\n                <BadgeAutocomplete></BadgeAutocomplete>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AppAutoComplete\r\n"],"sourceRoot":""}